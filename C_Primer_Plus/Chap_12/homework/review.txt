1.
自动存储类，寄存器存储类，静态空连接存储类

2.
静态外部链接、空连接，内部链接

3.
静态外部链接、内部链接

4.
空链接

5.
引用声明

6.
`malloc` 和 `calloc` 都是 C 语言中的动态内存分配函数，它们的主要区别在于初始化和分配方式：

1. **malloc**：
   - 函数原型：`void* malloc(size_t size);`
   - 功能：根据传入的 `size` 参数分配一块连续的未初始化的内存空间。
   - 返回值：如果成功分配内存，则返回指向这块内存的指针；如果失败（如内存不足），则返回 `NULL`。
   - 使用后需要检查返回值是否为 `NULL`，以确保分配成功。

2. **calloc**：
   - 函数原型：`void* calloc(size_t num, size_t size);`
   - 功能：根据传入的 `num`（元素数量）和 `size`（每个元素的大小）参数分配一块连续的、初始化为零的内存空间。
   - 返回值：如果成功分配内存，并将其所有字节初始化为零，则返回指向这块内存的指针；如果失败，则返回 `NULL`。
   - 使用后也需要检查返回值是否为 `NULL`。

总结起来，主要的区别在于：

- 初始化：`malloc` 分配的内存不会被初始化，其内容是不确定的（可能包含之前的数据残留）。而 `calloc` 会将分配的内存初始化为零。
- 参数：`malloc` 只需要一个参数，即所需内存的总大小。而 `calloc` 需要两个参数，一个是元素的数量，另一个是每个元素的大小。

在实际使用中，如果你需要分配一块未初始化的内存，并且知道确切的字节数，那么可以使用 `malloc`。如果你需要分配一块已经初始化为零的内存，并且知道元素的数量和每个元素的大小，那么可以使用 `calloc`。

7.
disay 全局变量
lily 局部变量

8.

9.
a.


